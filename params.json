{"name":"Sphinx Yii Component","tagline":"Yii component for work with Sphinx Search","body":"Yii Sphinx Component\r\n====================\r\n\r\nSimple and powerful component for work with Sphinx search engine. This is a beta version, please help with testing and bug reports.\r\nYou can find old stable version at \"releases\" page\r\n\r\nFeatures\r\n--------\r\n\r\n* Simple query methods\r\n* Extended ESphinxSearchCriteria for complex queries\r\n* Support connection by Sphinx API and Sphinx QL\r\n* Support packeted queries for both connections\r\n* Unit tests coverage\r\n\r\n\r\nConfigure\r\n----------\r\n\r\n```php\r\n'import' => array(\r\n    // i hope remove this in new versions\r\n    'ext.sphinx.*',\r\n    'ext.sphinx.ql.*',\r\n    'ext.sphinx.enums.*',\r\n),\r\n\r\n'components' => array(\r\n    'sphinx' => array(\r\n        'class' => 'ext.sphinx.ESphinxApiConnection', // sphinx api mode\r\n        //'class' => 'ext.sphinx.ESphinxMysqlConnection', for sphinx ql mode\r\n        'server' => array('localhost', 3386),\r\n        'connectionTimeout' => 3, // optional, default 0 - no limit\r\n        'queryTimeout'      => 5, // optional, default 0 - no limit\r\n    ),\r\n),\r\n```\r\n\r\n\r\nHow to use\r\n----------\r\n\r\nAll component classes names begins with ESphinx.\r\nMain object we used for querying is ESphinxQuery.\r\n\r\nQuery in index:\r\n```php\r\nYii::app()->sphinx->executeQuery(new ESphinxQuery('Hello world!'), 'blog');\r\n```\r\n\r\n\r\nExtended queries\r\n----------------\r\nOften we need search in index with some parametrs and options. For this task component has class ESphinxSearchCriteria.\r\nIt's very similar to CDbCriteria and has the same idea.\r\n\r\nSearch in article index with some parametrs:\r\n\r\n```php\r\n$criteria = new ESphinxSearchCriteria(array(\r\n    'sortMode' => ESphinxSort::EXTENDED,\r\n    'orders' => array(\r\n        'date_created' => 'DESC',\r\n        'date_updated' => 'ASC',\r\n    ),\r\n    'mathMode' => ESphinxMatch::EXTENDED,\r\n));\r\n\r\n$query = new ESphinxQuery('@(title,body) hello world', 'articles', $criteria);\r\n```\r\n\r\nCriteria can changing at work.\r\n```php\r\n$criteria = new ESphinxSearchCriteria(array('mathMode' => ESphinxMatch::EXTENDED));\r\n$criteria->addFilter('user_id', 1000); // add filter by user, we can use integer or integer array\r\n$criteria->addFilter('site_id', 123, false, 'site'); // add filter by site_id field with key value (will used later)\r\n\r\n// querying\r\n$result = Yii::app()->sphinx->executeQuery(new ESphinxQuery('', 'products', $criteria));\r\n\r\n// search same query by another site\r\n$criteria->addFilter('site_id', 321, false, 'site'); // change site_id param value\r\n\r\n// querying\r\n$result = Yii::app()->sphinx->executeQuery(new ESphinxQuery('', 'products', $criteria));\r\n\r\n// search same query but without site_id param\r\n$criteria->deleteFilter('site'); // delete filter on site_id field\r\n\r\n// querying....\r\n```\r\n\r\n\r\nMulti queries\r\n-------------\r\nOne of the powerfull sphinx features is multi queries (packet queries). When you send two or more queries\r\nsphinx does internal optimisation for faster work.\r\n\r\n```php\r\n$query1 = new ESphinxQuery('', 'products', array('filters' => array(array('site_id', 123))));\r\n$query2 = new ESphinxQuery('', 'products', array('filters' => array(array('site_id', 321))));\r\n\r\n$results = Yii::app()->sphinx->executeQueries(array($query1, $query2));\r\n```\r\n\r\n\r\nAnother way to add queries:\r\n```php\r\n$query = new ESphinxQuery('', 'products', array('filters' => array(array('site_id', 123, 'key' => 'site_id')))));\r\nYii::app()->sphinx->addQuery($query);\r\n\r\n// change previous site_id filter value\r\n$query->criteria->addFilter('site_id', 321, false, 'site_id');\r\n\r\n$results = Yii::app()->sphinx->runQueries();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}